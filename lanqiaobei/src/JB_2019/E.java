package JB_2019;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

/**
 * @author hey
 * @description 试题E:迷宫
 * 下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，
 * 标记为 0 的为可 以通行的地方。
 * 010000
 * 000100
 * 001001
 * 110000
 * 迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。
 * 对于上面的迷宫，从入口开始，可以按DRRURRDDDR 的顺序通过迷宫， 一共 10 步。其中 D、U、L、R 分别表示向下、向上、向左、向右走。
 * 对于下面这个更复杂的迷宫（30 行 50 列），请找出一种通过迷宫的方式， 其使用的步数最少，在步数最少的前提下，
 * 请找出字典序最小的一个作为答案。 请注意在字典序中D<L<R<U。（如果你把以下文字复制到文本文件中，
 * 请务 必检查复制的内容是否与文档中的一致。在试题目录下有一个文件 maze.txt， 内容与下面的文本相同）
 * 01010101001011001001010110010110100100001000101010
 * 00001000100000101010010000100000001001100110100101
 * 01111011010010001000001101001011100011000000010000
 * 01000000001010100011010000101000001010101011001011
 * 00011111000000101000010010100010100000101100000000
 * 11001000110101000010101100011010011010101011110111
 * 00011011010101001001001010000001000101001110000000
 * 10100000101000100110101010111110011000010000111010
 * 00111000001010100001100010000001000101001100001001
 * 11000110100001110010001001010101010101010001101000
 * 00010000100100000101001010101110100010101010000101
 * 11100100101001001000010000010101010100100100010100
 * 00000010000000101011001111010001100000101010100011
 * 10101010011100001000011000010110011110110100001000
 * 10101010100001101010100101000010100000111011101001
 * 10000000101100010000101100101101001011100000000100
 * 10101001000000010100100001000100000100011110101001
 * 00101001010101101001010100011010101101110000110101
 * 11001010000100001100000010100101000001000111000010
 * 00001000110000110101101000000100101001001000011101
 * 10100101000101000000001110110010110101101010100001
 * 00101000010000110101010000100010001001000100010101
 * 10100001000110010001000010101001010101011111010010
 * 00000100101000000110010100101001000001000000000010
 * 11010000001001110111001001000011101001011011101000
 * 00000110100010001000100000001000011101000000110011
 * 10101000101000100010001111100010101001010000001000
 * 10000010100101001010110000000100101010001011101000
 * 00111100001000010000000110111000000001000000001011
 * 10000001100111010111010001000110111010101101111000
 * @create 2020-07-05-22:22
 */
public class E {
    static class Pair{
        int row;
        int col;
        public Pair(int x, int y) {
            row = x;
            col = y;
        }
    }

    static char[] dir = new char[] {'D', 'L', 'R', 'U'};
    static String[] g = new String[30];//保存迷宫图的每一行的路况
    static int[][] dist = new int[30][50];//dist[i][j]为(i, j)这个点到终点的距离
    //坐标向量：下、左、右、上
    static int[] dx = new int[] {1, 0, 0, -1};
    static int[] dy = new int[] {0, -1, 1, 0};

    public static void bfs() {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(29, 49));
        while(!q.isEmpty()) {
            Pair t = q.poll();
            for(int i = 0;i < 4;i++) {//遍历两个方向向量
                int x = t.row + dx[i];
                int y = t.col + dy[i];
                if(x >= 0 && x < 30 && y >= 0 && y < 50 && dist[x][y] == -1 && g[x].charAt(y) == '0') {
                    dist[x][y] = dist[t.row][t.col] + 1;
                    q.add(new Pair(x, y));
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        for(int i = 0;i < 30;i++) g[i] = sc.nextLine();
        sc.close();//读完就可以关了
        String res = "";
        //初始化dist数组
        for(int i = 0;i < dist.length;i++) {
            for(int j = 0;j < dist[0].length;j++) {
                dist[i][j] = -1;//-1表示未访问过
            }
        }
        dist[29][49] = 0;//终点到终点的距离是0
        bfs();
        System.out.println(dist[0][0]);//获取起点到终点的最小路径距离
        //再从头搜，找出这条路径
        int x = 0;
        int y = 0;
        while(x!=29||y!=49) {
            for(int i = 0;i < 4;i++) {//枚举四个方向
                int nx = x + dx[i];
                int ny = y + dy[i];
                if(nx >= 0 && nx < 30 && ny >= 0 && ny < 50 && g[nx].charAt(ny) == '0') {
                    if(dist[x][y] == 1 + dist[nx][ny]) {//在最短路径上
                        x = nx;//更新 x, y
                        y = ny;
                        res += dir[i];
                        break;//找到正确方向，就不需要再找其他方向了
                    }
                }
            }
        }
        System.out.println(res);
    }
}
